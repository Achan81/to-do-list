{"version":3,"sources":["components/Todo.js","components/TodoForm.js","App.js","index.js"],"names":["Todo","completed","task","handleClick","handleDelete","className","onClick","type","TodoForm","handleSubmit","handleChange","newTodo","hasNewTodo","onSubmit","placeholder","onChange","value","disabled","App","React","useState","storedTodos","window","localStorage","getItem","JSON","parse","todos","setTodos","setNewTodo","trim","useEffect","setItem","stringify","remainingTodos","filter","todo","length","href","rel","target","alt","src","e","preventDefault","createdTodo","id","uuid","completedTrueRemove","confirm","filteredCompletedTodos","map","todoId","newTodos","toggleComplete","todoIdToRemove","filteredTodos","deleteTodo","ReactDOM","render","document","getElementById"],"mappings":"yNA0BeA,MA1Bf,YAA+D,IAA/CC,EAA8C,EAA9CA,UAAWC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aAG5C,OACE,mCACE,qBAAKC,UAAU,YAAf,SACE,qBAAKA,UAAU,MAAf,SACE,sBAAKA,UAAU,gCAAf,UACE,oBAEEA,UAAYJ,EAAY,YAAc,GAEtCK,QAASH,EAJX,SAMGD,IAEH,wBAAQI,QAASF,EAAcG,KAAK,OAAOF,UAAU,kCAArD,8BCEGG,MAlBf,YAAwE,IAApDC,EAAmD,EAAnDA,aAAcC,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,WAEvD,OACE,uBAAMC,SAAUJ,EAAhB,UACE,uBACEJ,UAAU,qBACVS,YAAY,OAAOC,SAAUL,EAC7BM,MAAOL,IAKT,wBAAQM,UAAWL,EAAYP,UAAU,8BAAzC,qBC8ISa,MApJf,WACE,MAA0BC,IAAMC,UAAS,WACvC,IAAMC,EAAcC,OAAOC,aAAaC,QAAQ,SAChD,OAAIH,EACKI,KAAKC,MAAML,GAEb,MALT,mBAAOM,EAAP,KAAcC,EAAd,KAQA,EAA8BT,IAAMC,SAAS,IAA7C,mBAAOT,EAAP,KAAgBkB,EAAhB,KACMjB,IAAeD,EAAQmB,OAE7BX,IAAMY,WAAU,WACdT,OAAOC,aAAaS,QAAQ,QAASP,KAAKQ,UAAUN,MACnD,CAACA,IAGJ,IA2CMO,EAAiBP,EAAMQ,QAAO,SAAAC,GAAI,OAAKA,EAAKnC,aAAWoC,OAe7D,OACE,qCACE,qBAAKhC,UAAU,yEAAf,SACE,qBAAKA,UAAU,yBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,iCAEE,sBAAKA,UAAU,wCAAf,UACE,mBAAGiC,KAAK,4BAA4BC,IAAI,sBAAsBC,OAAO,SAArE,SACE,qBAAKC,IAAI,OAAOC,IAAI,kCAAkCrC,UAAU,0BAElE,mBAAGiC,KAAK,8BAA8BC,IAAI,sBAAsBC,OAAO,SAAvE,SACE,qBAAKC,IAAI,OAAOC,IAAI,kCAAkCrC,UAAU,0BAElE,mBAAGiC,KAAK,uCAAuCC,IAAI,sBAAsBC,OAAO,SAAhF,SACE,qBAAKC,IAAI,WAAWC,IAAI,kCAAkCrC,UAAU,iCAGxE,oBAAIA,UAAU,kBAAd,wBACA,oBAAGA,UAAU,YAAb,sBAAmC6B,EAAnC,sBACA,uBAGA,uBAEA,qBAAK7B,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,qBAAf,SACE,cAAC,EAAD,CACEI,aAvFC,SAACkC,GAGpB,GAFAA,EAAEC,iBAEGjC,EAAQmB,OAAb,CAEA,IAAMe,EAAc,CAClB3C,KAAMS,EACNV,WAAW,EACX6C,GAAIC,eAENnB,EAAS,GAAD,mBAAKD,GAAL,CAAYkB,KACpBhB,EAAW,MA6EOnB,aA1EC,SAACiC,GACpBd,EAAWc,EAAEH,OAAOxB,QA0EFL,QAASA,EACTC,WAAYA,MAIhB,sBAAKP,UAAU,qBAAf,UACE,oBAAGA,UAAU,oBAAb,wCAA4D,sBAAMA,UAAU,+BAAhB,kBAA5D,oBACA,wBAAQE,KAAK,SAASF,UAAU,uCAAuCC,QAnD7D,SAAC0C,GAC3B,GAAI1B,OAAO2B,QAAQ,0DAA2D,CAC5E,IAAMC,EAAyBvB,EAAMQ,QAAO,SAAAC,GAC1C,IAAuB,IAAnBA,EAAKnC,UACP,OAAO+C,KAIXpB,EAASsB,KA2CK,gDAMN,oBAAI7C,UAAU,wBAAd,SACGsB,EAAMwB,KAAI,SAAAf,GAAI,OACb,cAAC,EAAD,CAEElC,KAAMkC,EAAKlC,KACXD,UAAWmC,EAAKnC,UAChBE,YAAa,kBAxFR,SAACiD,GACtB,IAAMC,EAAW1B,EAAMwB,KAAI,SAAAf,GACzB,OAAIA,EAAKU,KAAOM,EACP,2BAAKhB,GAAZ,IAAkBnC,WAAYmC,EAAKnC,YAE9BmC,KAETR,EAASyB,GAiF0BC,CAAelB,EAAKU,KACvC1C,aAAc,kBA7Eb,SAACmD,GAClB,GAAIjC,OAAO2B,QAAQ,8CAA+C,CAEhE,IAAMO,EAAgB7B,EAAMQ,QAAO,SAAAC,GACjC,OAAOA,EAAKU,KAAOS,KAGrB3B,EAAS4B,IAsEyBC,CAAWrB,EAAKU,MAJ/BV,EAAKU,kBAcxB,qBAAKzC,UAAU,YAAf,SACE,qBAAKA,UAAU,uDC1IvBqD,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d72d7edd.chunk.js","sourcesContent":["function Todo({ completed, task, handleClick, handleDelete }) {\n  \n  // function Todo(props) { above method bypassing props and below props.completed this is called object destructuring\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"d-flex justify-content-center\">\n            <li \n              //   key={todo.id} \n              className= {completed ? 'completed' : ''}\n              // onClick={() => toggleComplete(todo.id)} //delayed definition to call following function\n              onClick={handleClick}\n            > \n              {task}\n            </li>\n            <button onClick={handleDelete} type=\"text\" className=\"delete-task btn-none btn btn-sm\">REMOVE</button>\n          \n          </div>\n        </div>\n      </div>\n    </>\n    \n  )\n}\n\nexport default Todo ","function TodoForm({ handleSubmit, handleChange, newTodo, hasNewTodo }) {\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input \n        className=\"form-label pt-0 al\"\n        placeholder=\"Task\" onChange={handleChange}\n        value={newTodo} />\n      {/* is this true fo this to do, if it is at this class otherwise don't add any class) */}\n      {/* controlled input - by adding value key*/}\n      {/* <button disabled={!hasNewTodo}>Add</button> */}\n\n      <button disabled={!hasNewTodo} className=\"add-btn btn btn-dark btn-sm\">ADD</button>\n\n      \n    </form>\n  )\n}\nexport default TodoForm","import React from 'react'\nimport { v4 as uuid } from 'uuid'\n\nimport Todo from './components/Todo'\nimport TodoForm from './components/TodoForm'\n\nfunction App() {\n  const [todos, setTodos] = React.useState(() => {\n    const storedTodos = window.localStorage.getItem('todos')\n    if (storedTodos) {\n      return JSON.parse(storedTodos)\n    }\n    return []\n  })  \n\n  const [newTodo, setNewTodo] = React.useState('') // console.log('current todos', todos)\n  const hasNewTodo = !!newTodo.trim()\n\n  React.useEffect(() => {\n    window.localStorage.setItem('todos', JSON.stringify(todos))\n  }, [todos])\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault() // console.log('submitting', newTodo)\n\n    if (!newTodo.trim()) return //if input is empty doesn't add to list (including white space .trim)\n\n    const createdTodo = {\n      task: newTodo,\n      completed: false,\n      id: uuid(),\n    }\n    setTodos([...todos, createdTodo]) //add todo to the end of the list\n    setNewTodo('') //this will revert the input box back to its original start point.\n  }\n\n  const handleChange = (e) => { // console.log('typing', e.target.value)\n    setNewTodo(e.target.value)\n  }\n\n  // loop through the onclick of each todo loop, find the one with the Id that was clicked and update its completed Boolean. \n  // Ignore the ones that weren't clicked and set them back into state to have the re render occur.\n  const toggleComplete = (todoId) => {\n    const newTodos = todos.map(todo => {\n      if (todo.id === todoId) {\n        return { ...todo, completed: !todo.completed }\n      }\n      return todo\n    })\n    setTodos(newTodos)\n    // console.log(newTodos)\n    // console.log('clicked', todoId)\n  }\n  \n  const deleteTodo = (todoIdToRemove) => {\n    if (window.confirm('Are you sure you want to remove this item?')) {\n      // make custom modal confirmation pop up...\n      const filteredTodos = todos.filter(todo => {\n        return todo.id !== todoIdToRemove\n      })\n      // console.log(filteredTodos)\n      setTodos(filteredTodos)\n    }\n  }\n\n  const remainingTodos = todos.filter(todo => !todo.completed).length\n\n  const deleteCompletedTodo = (completedTrueRemove) => {\n    if (window.confirm('Are you sure you want to remove these completed items?')) {\n      const filteredCompletedTodos = todos.filter(todo => {\n        if (todo.completed !== true) {\n          return completedTrueRemove\n        }\n        return\n      })\n      setTodos(filteredCompletedTodos)\n    }\n  }\n\n\n  return (\n    <>\n      <div className=\"container col-12 listbg mt-4 pt-2 pb-1 shadow p-3 mb-5 bg-body rounded\">\n        <div className=\"row align-items-center\">\n          <div className=\"col\">\n            <main>\n\n              <div className=\"icon-group d-flex justify-content-end\">\n                <a href=\"mailto:achan81@icloud.com\" rel=\"noopener noreferrer\" target=\"_blank\">\n                  <img alt=\"mail\" src=\"https://i.imgur.com/l0ehegq.png\" className=\"icon mail-image col\"/></a>\n\n                <a href=\"https://github.com/Achan81/\" rel=\"noopener noreferrer\" target=\"_blank\">\n                  <img alt=\"acgh\" src=\"https://i.imgur.com/yWic7vC.png\" className=\"icon acgh-image col\"/></a>\n    \n                <a href=\"https://www.linkedin.com/in/achan81/\" rel=\"noopener noreferrer\" target=\"_blank\">\n                  <img alt=\"linkedin\" src=\"https://i.imgur.com/6j6BRm3.png\" className=\"icon linkedin-image col\"/></a>\n              </div>\n\n              <h5 className=\"title text-bold\">TO DO LIST</h5>\n              <p className=\"remaining\">You have {remainingTodos} thing(s) to do!</p> \n              <hr></hr>\n              {/* re-rendered to show how my Todos there are  */}\n            \n              <hr></hr>\n\n              <div className=\"container\">\n                <div className=\"row\">\n                  <div className=\"col-xs-12 col-sm-6\">\n                    <TodoForm\n                      handleSubmit={handleSubmit}\n                      handleChange={handleChange}\n                      newTodo={newTodo}\n                      hasNewTodo={hasNewTodo}\n                    />\n                  </div>\n\n                  <div className=\"col-xs-12 col-sm-6\">\n                    <p className=\"small-instruction\">(click on assigned task to <span className=\"text-decoration-line-through\">mark</span> as completed)</p>\n                    <button type=\"button\" className=\"remove-completed btn btn-dark btn-sm\" onClick={deleteCompletedTodo}>Remove all Completed Tasks</button>\n                  </div>\n                </div>\n              </div>\n\n\n              <ul className=\"container tasks-added\">\n                {todos.map(todo => (\n                  <Todo\n                    key={todo.id} \n                    task={todo.task} \n                    completed={todo.completed} \n                    handleClick={() => toggleComplete(todo.id)} \n                    handleDelete={() => deleteTodo(todo.id)} \n                  />\n                ))}\n              </ul>\n\n            </main>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <div className=\"icons d-flex flex-row justify-content-center\">\n\n        </div>\n      </div>\n    </>\n    \n  )\n  \n}\n\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/main.scss'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}